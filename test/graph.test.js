import {Draw,code_gen,node_normal} from '../src/js/Data_graph.js';
import assert from 'assert';

describe('The javascript parser', () => {    it(' empty', () => { assert.equal(JSON.stringify(Draw('', ''),null,-1), '[]'); });
    it(' varDec', () => { assert.equal(JSON.stringify(Draw('function foo(x,y,z) { if(x<100) x++; let b=5; return b;}','1,2,3'),null,-1), '[{"data":{"id":1,"name":"x < 100#(1)","type":"Tg"}},{"data":{"id":2,"name":"","type":"Cg"}},{"data":{"id":4,"name":"let b = 5;#(3)","type":"Rg"}},{"data":{"id":5,"name":"return b;#(4)","type":"Rg"}},{"data":{"id":3,"name":"x++#(2)","type":"Rg"}},{"data":{"id":6,"source":1,"target":2}},{"data":{"id":7,"source":1,"target":3}},{"data":{"id":8,"source":2,"target":4}},{"data":{"id":9,"source":4,"target":5}},{"data":{"id":10,"source":3,"target":2}}]'); });
    it(' simple function ', () => { assert.equal(JSON.stringify(Draw('function foo(x, y, z){ }', ''),null,-1), '[]'); });
    it(' simple function with return  ', () => { assert.equal(JSON.stringify(Draw('function foo(x, y, z){ let a=6 ; return a;}', ''),null,-1), '[{"data":{"id":1,"name":"let a = 6;#(1)","type":"Rg"}},{"data":{"id":2,"name":"return a;#(2)","type":"Rg"}},{"data":{"id":3,"source":1,"target":2}}]'); });
    it(' empty', () => { assert.equal(JSON.stringify(Draw('function foo(x, y, z){ let a=6 ; if(x<10 && y <20 && z<10){x=x+1+a;} return x;}', '1,2,3'),null,-1), '[{"data":{"id":1,"name":"let a = 6;#(1)","type":"Rg"}},{"data":{"id":2,"name":"x < 10 && y < 20 && z < 10#(2)","type":"Tg"}},{"data":{"id":3,"name":"","type":"Cg"}},{"data":{"id":5,"name":"return x;#(4)","type":"Rg"}},{"data":{"id":4,"name":"x = x + 1 + a#(3)","type":"Rg"}},{"data":{"id":6,"source":1,"target":2}},{"data":{"id":7,"source":2,"target":3}},{"data":{"id":8,"source":2,"target":4}},{"data":{"id":9,"source":3,"target":5}},{"data":{"id":10,"source":4,"target":3}}]'); });
    it(' long function ', () => { assert.equal(JSON.stringify(Draw('function goo(x , y ,z) { let a = 8 ; while ((x+y+z+a)<100){ a++; if(x==9){ a++; } } if(x==8){ a++; } else { a=a+7; } return x+8; }', ''),null,-1), '[{"data":{"id":1,"name":"let a = 8;#(1)","type":"Rg"}},{"data":{"id":2,"name":"","type":"Cg"}},{"data":{"id":3,"name":"x + y + z + a < 100#(2)","type":"Tg"}},{"data":{"id":8,"name":"x == 8#(6)","type":"Tw"}},{"data":{"id":11,"name":"a = a + 7#(8)","type":"Rw"}},{"data":{"id":9,"name":"","type":"Cw"}},{"data":{"id":12,"name":"return x + 8;#(9)","type":"Rw"}},{"data":{"id":10,"name":"a++#(7)","type":"Rw"}},{"data":{"id":4,"name":"a++#(3)","type":"Rg"}},{"data":{"id":5,"name":"x == 9#(4)","type":"Tg"}},{"data":{"id":6,"name":"","type":"Cg"}},{"data":{"id":7,"name":"a++#(5)","type":"Rg"}},{"data":{"id":13,"source":1,"target":2}},{"data":{"id":14,"source":2,"target":3}},{"data":{"id":15,"source":3,"target":8}},{"data":{"id":16,"source":3,"target":4}},{"data":{"id":17,"source":8,"target":11}},{"data":{"id":18,"source":8,"target":10}},{"data":{"id":19,"source":11,"target":9}},{"data":{"id":20,"source":9,"target":12}},{"data":{"id":21,"source":10,"target":9}},{"data":{"id":22,"source":4,"target":5}},{"data":{"id":23,"source":5,"target":6}},{"data":{"id":24,"source":5,"target":7}},{"data":{"id":25,"source":6,"target":2}},{"data":{"id":26,"source":7,"target":6}}]'); });
    it(' long function2 ', () => { assert.equal(JSON.stringify(Draw('function goo(x , y ,z) { let a = 8 ; while ((x+y+z+a)<100){ a++; if(x==9){ a++; } } if(y==80) y=y+9; let h=8; if(x==8){ let y=21; a++; } else { a=a+7; } x=x+8; let v=x; return x+8+v; }', '1,2,3'),null,-1), '[{"data":{"id":1,"name":"let a = 8;#(1)","type":"Rg"}},{"data":{"id":2,"name":"","type":"Cg"}},{"data":{"id":3,"name":"x + y + z + a < 100#(2)","type":"Tg"}},{"data":{"id":8,"name":"y == 80#(6)","type":"Tw"}},{"data":{"id":9,"name":"","type":"Cw"}},{"data":{"id":11,"name":"let h = 8;#(8)","type":"Rw"}},{"data":{"id":12,"name":"x == 8#(9)","type":"Tw"}},{"data":{"id":15,"name":"a = a + 7#(11)","type":"Rw"}},{"data":{"id":13,"name":"","type":"Cw"}},{"data":{"id":16,"name":"x = x + 8 let v = x;#(12)","type":"Rw"}},{"data":{"id":17,"name":"return x + 8 + v;#(13)","type":"Rw"}},{"data":{"id":14,"name":"let y = 21; a++#(10)","type":"Rw"}},{"data":{"id":10,"name":"y = y + 9#(7)","type":"Rw"}},{"data":{"id":4,"name":"a++#(3)","type":"Rg"}},{"data":{"id":5,"name":"x == 9#(4)","type":"Tg"}},{"data":{"id":6,"name":"","type":"Cg"}},{"data":{"id":7,"name":"a++#(5)","type":"Rg"}},{"data":{"id":18,"source":1,"target":2}},{"data":{"id":19,"source":2,"target":3}},{"data":{"id":20,"source":3,"target":8}},{"data":{"id":21,"source":3,"target":4}},{"data":{"id":22,"source":8,"target":9}},{"data":{"id":23,"source":8,"target":10}},{"data":{"id":24,"source":9,"target":11}},{"data":{"id":25,"source":11,"target":12}},{"data":{"id":26,"source":12,"target":15}},{"data":{"id":27,"source":12,"target":14}},{"data":{"id":28,"source":15,"target":13}},{"data":{"id":29,"source":13,"target":16}},{"data":{"id":30,"source":16,"target":17}},{"data":{"id":31,"source":14,"target":13}},{"data":{"id":32,"source":10,"target":9}},{"data":{"id":33,"source":4,"target":5}},{"data":{"id":34,"source":5,"target":6}},{"data":{"id":35,"source":5,"target":7}},{"data":{"id":36,"source":6,"target":2}},{"data":{"id":37,"source":7,"target":6}}]'); });
    it(' long function 3', () => { assert.equal(JSON.stringify(Draw('function goo(x , y ,z) { let a = 8 ; while (a<50){ a++; } while ((x+y+z+a)<100){ a++; if(x==9){ a++; } } let h=8; if(y==80) y=y+9; if(x==8){ let y=21; a++; } else { a=a+7; } x=x+8; let v=x; return x+8+v; }', '1,2,3'),null,-1), '[{"data":{"id":1,"name":"let a = 8;#(1)","type":"Rg"}},{"data":{"id":2,"name":"","type":"Cg"}},{"data":{"id":3,"name":"a < 50#(2)","type":"Tg"}},{"data":{"id":5,"name":"","type":"Cw"}},{"data":{"id":6,"name":"x + y + z + a < 100#(4)","type":"Tw"}},{"data":{"id":11,"name":"let h = 8;#(8)","type":"Rw"}},{"data":{"id":12,"name":"y == 80#(9)","type":"Tw"}},{"data":{"id":13,"name":"","type":"Cw"}},{"data":{"id":15,"name":"x == 8#(11)","type":"Tw"}},{"data":{"id":18,"name":"a = a + 7#(13)","type":"Rw"}},{"data":{"id":16,"name":"","type":"Cw"}},{"data":{"id":19,"name":"x = x + 8 let v = x;#(14)","type":"Rw"}},{"data":{"id":20,"name":"return x + 8 + v;#(15)","type":"Rw"}},{"data":{"id":17,"name":"let y = 21; a++#(12)","type":"Rw"}},{"data":{"id":14,"name":"y = y + 9#(10)","type":"Rw"}},{"data":{"id":7,"name":"a++#(5)","type":"Rw"}},{"data":{"id":8,"name":"x == 9#(6)","type":"Tw"}},{"data":{"id":9,"name":"","type":"Cw"}},{"data":{"id":10,"name":"a++#(7)","type":"Rw"}},{"data":{"id":4,"name":"a++#(3)","type":"Rg"}},{"data":{"id":21,"source":1,"target":2}},{"data":{"id":22,"source":2,"target":3}},{"data":{"id":23,"source":3,"target":5}},{"data":{"id":24,"source":3,"target":4}},{"data":{"id":25,"source":5,"target":6}},{"data":{"id":26,"source":6,"target":11}},{"data":{"id":27,"source":6,"target":7}},{"data":{"id":28,"source":11,"target":12}},{"data":{"id":29,"source":12,"target":13}},{"data":{"id":30,"source":12,"target":14}},{"data":{"id":31,"source":13,"target":15}},{"data":{"id":32,"source":15,"target":18}},{"data":{"id":33,"source":15,"target":17}},{"data":{"id":34,"source":18,"target":16}},{"data":{"id":35,"source":16,"target":19}},{"data":{"id":36,"source":19,"target":20}},{"data":{"id":37,"source":17,"target":16}},{"data":{"id":38,"source":14,"target":13}},{"data":{"id":39,"source":7,"target":8}},{"data":{"id":40,"source":8,"target":9}},{"data":{"id":41,"source":8,"target":10}},{"data":{"id":42,"source":9,"target":5}},{"data":{"id":43,"source":10,"target":9}},{"data":{"id":44,"source":4,"target":2}}]'); });
    it(' long function 4', () => { assert.equal(JSON.stringify(Draw('function goo(x , y ,z) { let a = 8 ; a=a+5; a=a-x; while (a<50){ a++; } a=z+y+x+a; let h=8; h=h+8; h=h+1; return h; }', '1,2,3'),null,-1), '[{"data":{"id":1,"name":"let a = 8; a = a + 5 a = a - x#(1)","type":"Rg"}},{"data":{"id":2,"name":"","type":"Cg"}},{"data":{"id":3,"name":"","type":"Cg"}},{"data":{"id":5,"name":"a = z + y + x + a let h = 8; h = h + 8 h = h + 1#(4)","type":"Rw"}},{"data":{"id":6,"name":"return h;#(5)","type":"Rw"}},{"data":{"id":4,"name":"a++#(3)","type":"Rg"}},{"data":{"id":7,"source":1,"target":2}},{"data":{"id":8,"source":2,"target":3}},{"data":{"id":9,"source":3,"target":5}},{"data":{"id":10,"source":3,"target":4}},{"data":{"id":11,"source":5,"target":6}},{"data":{"id":12,"source":4,"target":2}}]'); });
    it(' long function 5', () => { assert.equal(JSON.stringify(Draw('function goo(x , y ,z) { if(x==6){ if(y==8) { z=x+y; } } x++; while (x<50){ x++; } return x; }', '1,2,3'),null,-1), '[{"data":{"id":1,"name":"x == 6#(1)","type":"Tg"}},{"data":{"id":2,"name":"","type":"Cg"}},{"data":{"id":6,"name":"x++#(4)","type":"Rg"}},{"data":{"id":7,"name":"","type":"Cg"}},{"data":{"id":8,"name":"x < 50#(5)","type":"Tg"}},{"data":{"id":10,"name":"return x;#(7)","type":"Rw"}},{"data":{"id":9,"name":"x++#(6)","type":"Rg"}},{"data":{"id":3,"name":"y == 8#(2)","type":"Tg"}},{"data":{"id":4,"name":"","type":"Cg"}},{"data":{"id":5,"name":"z = x + y#(3)","type":"Rg"}},{"data":{"id":11,"source":1,"target":2}},{"data":{"id":12,"source":1,"target":3}},{"data":{"id":13,"source":2,"target":6}},{"data":{"id":14,"source":6,"target":7}},{"data":{"id":15,"source":7,"target":8}},{"data":{"id":16,"source":8,"target":10}},{"data":{"id":17,"source":8,"target":9}},{"data":{"id":18,"source":9,"target":7}},{"data":{"id":19,"source":3,"target":4}},{"data":{"id":20,"source":3,"target":5}},{"data":{"id":21,"source":4,"target":2}},{"data":{"id":22,"source":5,"target":4}}]'); });
    it(' long function 6', () => { assert.equal(JSON.stringify(Draw('function goo(x , y ,z) { while (x<50){ x++; } x++; return x; }', '1,2,3'),null,-1), '[{"data":{"id":1,"name":"","type":"Cg"}},{"data":{"id":2,"name":"","type":"Cg"}},{"data":{"id":4,"name":"x++#(3)","type":"Rw"}},{"data":{"id":5,"name":"return x;#(4)","type":"Rw"}},{"data":{"id":3,"name":"x++#(2)","type":"Rg"}},{"data":{"id":6,"source":1,"target":2}},{"data":{"id":7,"source":2,"target":4}},{"data":{"id":8,"source":2,"target":3}},{"data":{"id":9,"source":4,"target":5}},{"data":{"id":10,"source":3,"target":1}}]'); });
    it(' empty', () => { assert.equal(JSON.stringify(Draw('function foo(x , y ,z) { if(x==100) { x++; } else { if(x==900) x++; } return x; }', '1,2,3'),null,-1).length,577);});
    it(' code_gen', () => { assert.equal(JSON.stringify(code_gen({type:'jjj',color: '#00CE4E',left:null,right:null}),null,-1), undefined); });
    it(' code_gen 2', () => { assert.equal(JSON.stringify(code_gen({type:'merge',color: '#00CE4o',left:null,right:null}),null,-1), undefined); });
    it(' code_gen 3', () => { assert.equal(JSON.stringify(node_normal({shape:'x',text:'null',color: '#00CE4E',left:null,right:null}),null,-1), undefined); });
    it(' code_gen 4', () => { assert.equal(JSON.stringify(node_normal({shape:'x',text:'null',color: '#F8F8F8',left:null,right:null}),null,-1), undefined); });
    it(' code_gen 5', () => { assert.equal(JSON.stringify(node_normal({shape:'ppp',text:'null',color: '#F8F8F8',left:null,right:null}),null,-1), undefined); });
    it(' code_gen 6', () => { assert.equal(JSON.stringify(node_normal({id:1,shape:'m',text:'null',color: '#F8F8F8',left:{id:2,shape:'m',text:'null',color: '#F8F8F8',left:null,right:null},right:null}),null,-1), undefined); });
    it(' code_gen 7', () => { assert.equal(JSON.stringify(node_normal({id:1,shape:'m',text:'null',color: '#00CE4E',left:{id:2,shape:'m',text:'null',color: '#F8F8F8',left:null,right:null},right:null}),null,-1), undefined); });
    it(' empty', () => { assert.equal(JSON.stringify(Draw('function foo(x , y ,z) { if(x==1) { x++; }  return x; }', '1,2,3'),null,-1).length,351);});  });

